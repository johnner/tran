{"version":3,"sources":["js/es6/utils.js"],"names":[],"mappings":";;;;;;IAAM,KAAK;AACG,WADR,KAAK,GACM;0BADX,KAAK;GACQ;;eADb,KAAK;;WAED,iBAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;;AAExB,aAAO,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM,EAAE;;AAE3C,YAAI,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;AAC/B,WAAG,CAAC,eAAe,GAAG,IAAI,CAAC;AAC3B,WAAG,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AACpB,YAAI,IAAI,IAAI,MAAM,EAAE;AAClB,aAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;SAC1D;AACD,WAAG,CAAC,MAAM,GAAG,YAAW;;;AAGtB,cAAI,GAAG,CAAC,MAAM,IAAI,GAAG,EAAE;;AAErB,mBAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;WACvB,MACI;;;AAGH,kBAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;WAC/B;SACF,CAAC;;;AAGF,WAAG,CAAC,OAAO,GAAG,YAAW;AACvB,gBAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;SAChC,CAAC;;;AAGF,YAAI,IAAI,CAAC,OAAO,EAAE;;;;;;AAChB,iCAAgB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,8HAAE;kBAAlC,GAAG;;AACV,iBAAG,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;aAC9C;;;;;;;;;;;;;;;SACF;;AAED,WAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;OACrC,CAAC,CAAC;KACJ;;;WACE,aAAC,GAAG,EAAkB;UAAhB,IAAI,yDAAC,EAAC,IAAI,EAAC,EAAE,EAAC;;AACrB,aAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KACvC;;;WAEG,cAAC,GAAG,EAAkB;UAAhB,IAAI,yDAAC,EAAC,IAAI,EAAC,EAAE,EAAC;;AACtB,aAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KACxC;;;SA/CG,KAAK;;;AAiDX,MAAM,CAAC,OAAO,GAAG,IAAI,KAAK,EAAE,CAAA","file":"js/es6/utils.js","sourcesContent":["class Utils {\n  constructor () {}\n  request (type, url, opts) {\n    // Return a new promise.\n    return new Promise(function(resolve, reject) {\n      // Do the usual XHR stuff\n      var req = new XMLHttpRequest();\n      req.withCredentials = true;\n      req.open(type, url);\n      if (type == 'POST') {\n        req.setRequestHeader(\"Content-Type\", \"application/json\");\n      }\n      req.onload = function() {\n        // This is called even on 404 etc\n        // so check the status\n        if (req.status == 200) {\n          // Resolve the promise with the response text\n          resolve(req.response);\n        }\n        else {\n          // Otherwise reject with the status text\n          // which will hopefully be a meaningful error\n          reject(Error(req.statusText));\n        }\n      };\n\n      // Handle network errors\n      req.onerror = function() {\n        reject(Error(\"Network Error\"));\n      };\n\n      // Set headers\n      if (opts.headers) {\n        for (let key of Object.keys(opts.headers)) {\n          req.setRequestHeader(key, opts.headers[key]);\n        }\n      }\n      // Make the request\n      req.send(JSON.stringify(opts.data));\n    });\n  }\n  get(url, opts={data:''}) {\n    return this.request('GET', url, opts);\n  }\n\n  post(url, opts={data:''}) {\n    return this.request('POST', url, opts);\n  }\n}\nmodule.exports = new Utils()\n"]}